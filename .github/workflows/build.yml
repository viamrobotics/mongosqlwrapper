name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: libmongosqlwrapper.so
            target: x86_64-unknown-linux-gnu
          - os: macos-latest
            artifact_name: libmongosqlwrapper.dylib
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
        override: true

    - name: Build
      run: |
        cargo build --release --target ${{ matrix.target }}
        echo "Build directory contents:"
        ls -la target/${{ matrix.target }}/release/

    - name: Create artifacts directory
      run: mkdir -p artifacts

    - name: Copy library to artifacts
      run: |
        if [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          cp target/${{ matrix.target }}/release/libmongosqlwrapper.so artifacts/ || {
            echo "Failed to copy .so file. Directory contents:"
            ls -la target/${{ matrix.target }}/release/
            exit 1
          }
        else
          cp target/${{ matrix.target }}/release/libmongosqlwrapper.dylib artifacts/ || {
            echo "Failed to copy .dylib file. Directory contents:"
            ls -la target/${{ matrix.target }}/release/
            exit 1
          }
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: artifacts/
        if-no-files-found: error

  release:
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4

    - name: List downloaded artifacts
      run: |
        echo "Current directory:"
        pwd
        echo "Directory contents:"
        ls -la
        echo "Artifact directory contents:"
        ls -la aarch64-apple-darwin-libmongosqlwrapper.a || true
        ls -la x86_64-apple-darwin-libmongosqlwrapper.a || true
        ls -la x86_64-unknown-linux-gnu-libmongosqlwrapper.a || true

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: aarch64-apple-darwin-libmongosqlwrapper.a/libmongosqlwrapper.a
        asset_name: libmongosqlwrapper-aarch64-apple-darwin.a
        asset_content_type: application/octet-stream

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: x86_64-apple-darwin-libmongosqlwrapper.a/libmongosqlwrapper.a
        asset_name: libmongosqlwrapper-x86_64-apple-darwin.a
        asset_content_type: application/octet-stream

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: x86_64-unknown-linux-gnu-libmongosqlwrapper.a/libmongosqlwrapper.a
        asset_name: libmongosqlwrapper-x86_64-unknown-linux-gnu.a
        asset_content_type: application/octet-stream 
